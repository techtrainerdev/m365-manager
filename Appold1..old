// app.js
const express = require('express');
const session = require('express-session');
const path = require('path');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Configure middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Configure session
app.use(session({
  secret: process.env.SESSION_SECRET || 'dev-secret-key',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    maxAge: 3600000 // 1 hour
  }
}));

// Middleware to make user data available to all views
app.use((req, res, next) => {
  res.locals.user = req.session.user;
  res.locals.isAuthenticated = req.session.isAuthenticated || false;
  next();
});

// Load route modules
const dashboardRoutes = require('./routes/dashboard');
const entraRoutes = require('./routes/entra');
const intuneRoutes = require('./routes/intune');

// Authentication middleware
function isAuthenticated(req, res, next) {
  if (req.session.isAuthenticated) {
    return next();
  }
  res.redirect('/login');
}

// Home route
app.get('/', (req, res) => {
  res.render('index', { 
    title: 'Home',
    isAuthenticated: req.session.isAuthenticated || false
  });
});

// Login routes - simplified for initial development
app.get('/login', (req, res) => {
  res.render('login', { 
    title: 'Login',
    error: null
  });
});

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  
  // Simple validation - in a real app, this would authenticate against Azure AD
  if (username && password) {
    // Set session data
    req.session.isAuthenticated = true;
    req.session.user = {
      username,
      displayName: username,
      email: `${username}@example.com`,
      roles: ['Admin']
    };
    
    return res.redirect('/dashboard');
  }
  
  res.render('login', { 
    title: 'Login',
    error: 'Invalid username or password'
  });
});

app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/');
  });
});

// Use route modules
app.use('/dashboard', isAuthenticated, dashboardRoutes);
app.use('/entra', isAuthenticated, entraRoutes);
app.use('/intune', isAuthenticated, intuneRoutes);

// 404 handler
app.use((req, res) => {
  res.status(404).render('error', {
    title: 'Page Not Found',
    message: `The page "${req.url}" was not found.`
  });
});

// Error handler
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  res.status(500).render('error', {
    title: 'Server Error',
    message: 'An unexpected error occurred on the server.',
    error: process.env.NODE_ENV === 'development' ? err : null
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Visit http://localhost:${PORT} in your browser`);
});

module.exports = app;